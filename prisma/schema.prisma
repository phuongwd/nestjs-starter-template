generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                  Int                     @id @default(autoincrement())
  email               String                  @unique(map: "users_email_unique")
  password            String?
  firstName           String
  lastName            String
  provider            String?
  providerId          String?
  picture             String?
  resetToken          String?
  resetTokenExpiresAt DateTime?               @db.Timestamp(6)
  createdAt           DateTime                @default(now()) @db.Timestamp(6)
  updatedAt           DateTime                @updatedAt @db.Timestamp(6)
  accessTokens        AccessToken[]
  adminAuditLogs      AdminAuditLog[]
  adminSessions       AdminSession[]
  auditLogs           AuditLog[]
  organizationMembers OrganizationMember[]
  subscriptionNotes   SubscriptionAdminNote[] @relation("SubscriptionNoteAuthor")
  systemRoles         SystemRole[]            @relation("UserSystemRoles")

  @@index([provider, providerId], map: "users_provider_providerid_index")
  @@map("users")
}

model Organization {
  id                       Int                        @id @default(autoincrement())
  name                     String
  slug                     String                     @unique(map: "organizations_slug_unique")
  createdAt                DateTime                   @default(now()) @db.Timestamp(6)
  updatedAt                DateTime                   @updatedAt @db.Timestamp(6)
  description              String?
  customDomains            CustomDomain[]
  memberActivities         MemberActivity[]
  members                  OrganizationMember[]
  pendingRegistrations     PendingRegistrations[]
  roles                    Role[]
  subscription             Subscription?

  @@map("organizations")
}

model Role {
  id             Int              @id @default(autoincrement())
  name           String
  description    String?
  organizationId Int?
  isSystemRole   Boolean          @default(false)
  createdAt      DateTime         @default(now()) @db.Timestamp(6)
  updatedAt      DateTime         @updatedAt @db.Timestamp(6)
  members        MemberRole[]
  permissions    RolePermission[]
  organization   Organization?    @relation(fields: [organizationId], references: [id], onDelete: Cascade, map: "roles_organizationid_foreign")

  @@unique([name, organizationId], map: "roles_name_organizationid_unique")
  @@index([organizationId], map: "roles_organizationid_index")
  @@map("roles")
}

model Permission {
  id           Int              @id @default(autoincrement())
  name         String           @unique(map: "permissions_name_unique")
  description  String?
  resourceType String
  action       String
  createdAt    DateTime         @default(now()) @db.Timestamp(6)
  roles        RolePermission[]

  @@index([resourceType, action], map: "permissions_resourcetype_action_index")
  @@map("permissions")
}

model RolePermission {
  roleId       Int
  permissionId Int
  createdAt    DateTime   @default(now()) @db.Timestamp(6)
  permission   Permission @relation(fields: [permissionId], references: [id], onDelete: Cascade, map: "role_permissions_permissionid_foreign")
  role         Role       @relation(fields: [roleId], references: [id], onDelete: Cascade, map: "role_permissions_roleid_foreign")

  @@id([roleId, permissionId])
  @@index([permissionId], map: "role_permissions_permissionid_index")
  @@index([roleId], map: "role_permissions_roleid_index")
  @@map("role_permissions")
}

model OrganizationMember {
  id              Int              @id @default(autoincrement())
  organizationId  Int
  userId          Int?
  status          String           @default("INVITED")
  createdAt       DateTime         @default(now()) @db.Timestamp(6)
  updatedAt       DateTime         @updatedAt @db.Timestamp(6)
  invitationToken String?          @unique(map: "organization_members_invitationtoken_unique")
  email           String
  activities      MemberActivity[]
  roles           MemberRole[]
  organization    Organization     @relation(fields: [organizationId], references: [id], onDelete: Cascade, map: "organization_members_organizationid_foreign")
  user            User?            @relation(fields: [userId], references: [id], onDelete: Cascade, map: "organization_members_userid_foreign")

  @@unique([organizationId, email], map: "organization_members_organizationid_email_unique")
  @@unique([organizationId, userId], map: "organization_members_organizationid_userid_unique")
  @@index([email], map: "organization_members_email_index")
  @@index([organizationId], map: "organization_members_organizationid_index")
  @@index([organizationId, status], map: "organization_members_organizationid_status_index")
  @@index([status], map: "organization_members_status_index")
  @@index([userId], map: "organization_members_userid_index")
  @@map("organization_members")
}

model MemberRole {
  memberId  Int
  roleId    Int
  createdAt DateTime           @default(now()) @db.Timestamp(6)
  member    OrganizationMember @relation(fields: [memberId], references: [id], onDelete: Cascade, map: "member_roles_memberid_foreign")
  role      Role               @relation(fields: [roleId], references: [id], onDelete: Cascade, map: "member_roles_roleid_foreign")

  @@id([memberId, roleId])
  @@index([memberId], map: "member_roles_memberid_index")
  @@index([memberId, roleId], map: "member_roles_memberid_roleid_index")
  @@index([roleId], map: "member_roles_roleid_index")
  @@map("member_roles")
}

model Plan {
  id            Int            @id @default(autoincrement())
  name          String
  description   String?
  features      Json?
  price         Decimal        @db.Decimal(10, 2)
  isActive      Boolean        @default(true)
  createdAt     DateTime       @default(now()) @db.Timestamp(6)
  updatedAt     DateTime       @updatedAt @db.Timestamp(6)
  interval      String         @default("month")
  memberLimit   Int            @default(5)
  subscriptions Subscription[]

  @@map("plans")
}

model Subscription {
  id                 Int                     @id @default(autoincrement())
  organizationId     Int                     @unique(map: "subscriptions_organizationid_unique")
  planId             Int
  status             String
  startDate          DateTime                @db.Timestamp(6)
  endDate            DateTime?               @db.Timestamp(6)
  trialEndsAt        DateTime?               @db.Timestamp(6)
  canceledAt         DateTime?               @db.Timestamp(6)
  currentPeriodStart DateTime                @db.Timestamp(6)
  currentPeriodEnd   DateTime                @db.Timestamp(6)
  paymentMethodId    String?
  createdAt          DateTime                @default(now()) @db.Timestamp(6)
  updatedAt          DateTime                @updatedAt @db.Timestamp(6)
  lastPaymentDate    DateTime?               @db.Timestamp(6)
  nextPaymentDate    DateTime?               @db.Timestamp(6)
  paymentMethod      String?
  paymentReference   String?
  billingHistory     BillingHistory[]
  adminNotes         SubscriptionAdminNote[]
  organization       Organization            @relation(fields: [organizationId], references: [id], onDelete: Cascade, map: "subscriptions_organizationid_foreign")
  plan               Plan                    @relation(fields: [planId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "subscriptions_planid_foreign")

  @@index([planId], map: "subscriptions_planid_index")
  @@map("subscriptions")
}

model SubscriptionAdminNote {
  id             Int          @id @default(autoincrement())
  subscriptionId Int
  note           String
  type           String
  createdBy      Int
  createdAt      DateTime     @default(now()) @db.Timestamp(6)
  updatedAt      DateTime     @updatedAt @db.Timestamp(6)
  author         User         @relation("SubscriptionNoteAuthor", fields: [createdBy], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "subscription_admin_notes_createdby_foreign")
  subscription   Subscription @relation(fields: [subscriptionId], references: [id], onDelete: Cascade, map: "subscription_admin_notes_subscriptionid_foreign")

  @@index([createdBy], map: "subscription_admin_notes_createdby_index")
  @@index([subscriptionId], map: "subscription_admin_notes_subscriptionid_index")
  @@map("subscription_admin_notes")
}

model BillingHistory {
  id              Int          @id @default(autoincrement())
  subscriptionId  Int
  amount          Decimal      @db.Decimal(10, 2)
  currency        String       @default("USD")
  status          String
  paymentMethod   String?
  paymentIntentId String?
  invoiceUrl      String?
  createdAt       DateTime     @default(now()) @db.Timestamp(6)
  updatedAt       DateTime     @updatedAt @db.Timestamp(6)
  subscription    Subscription @relation(fields: [subscriptionId], references: [id], onDelete: Cascade, map: "billing_history_subscriptionid_foreign")

  @@index([subscriptionId], map: "billing_history_subscriptionid_index")
  @@map("billing_history")
}

model MemberActivity {
  id             Int                @id @default(autoincrement())
  organizationId Int
  memberId       Int
  action         String
  metadata       Json?
  createdAt      DateTime           @default(now()) @db.Timestamp(6)
  updatedAt      DateTime           @updatedAt @db.Timestamp(6)
  member         OrganizationMember @relation(fields: [memberId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "member_activities_memberid_foreign")
  organization   Organization       @relation(fields: [organizationId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "member_activities_organizationid_foreign")

  @@index([createdAt], map: "member_activities_createdat_index")
  @@index([memberId], map: "member_activities_memberid_index")
  @@index([organizationId, action], map: "member_activities_organizationid_action_index")
  @@index([organizationId], map: "member_activities_organizationid_index")
  @@index([organizationId, memberId], map: "member_activities_organizationid_memberid_index")
  @@map("member_activities")
}

model PendingRegistrations {
  id              Int          @id @default(autoincrement())
  email           String
  organizationId  Int
  invitationToken String       @unique(map: "pending_registrations_invitationtoken_unique")
  roleNames       String[]
  expiresAt       DateTime     @db.Timestamp(6)
  createdAt       DateTime     @default(now()) @db.Timestamp(6)
  updatedAt       DateTime     @updatedAt @db.Timestamp(6)
  organization    Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade, map: "pending_registrations_organizationid_foreign")

  @@index([email], map: "pending_registrations_email_index")
  @@index([invitationToken], map: "pending_registrations_invitationtoken_index")
  @@index([organizationId], map: "pending_registrations_organizationid_index")
  @@map("pending_registrations")
}

model CustomDomain {
  id                Int             @id @default(autoincrement())
  domain            String          @unique(map: "custom_domains_domain_unique")
  organizationId    Int
  status            DomainStatus    @default(PENDING)
  verificationToken String?
  verifiedAt        DateTime?       @db.Timestamp(6)
  createdAt         DateTime        @default(now()) @db.Timestamp(6)
  updatedAt         DateTime        @updatedAt @db.Timestamp(6)
  organization      Organization    @relation(fields: [organizationId], references: [id], onDelete: Cascade, map: "custom_domains_organizationid_foreign")
  sslCertificate    SslCertificate?

  @@index([domain], map: "custom_domains_domain_index")
  @@index([organizationId], map: "custom_domains_organizationid_index")
  @@map("custom_domains")
}

model SslCertificate {
  id          Int          @id @default(autoincrement())
  domainId    Int          @unique(map: "ssl_certificates_domainid_unique")
  certificate String
  privateKey  String
  issuedAt    DateTime     @default(now()) @db.Timestamp(6)
  expiresAt   DateTime     @db.Timestamp(6)
  provider    String       @default("letsencrypt")
  status      CertStatus   @default(ACTIVE)
  createdAt   DateTime     @default(now()) @db.Timestamp(6)
  updatedAt   DateTime     @updatedAt @db.Timestamp(6)
  domain      CustomDomain @relation(fields: [domainId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "ssl_certificates_domainid_foreign")

  @@map("ssl_certificates")
}

model SystemRole {
  id          Int      @id @default(autoincrement())
  name        String   @unique(map: "system_roles_name_unique")
  description String?
  permissions Json
  createdAt   DateTime @default(now()) @db.Timestamp(6)
  updatedAt   DateTime @updatedAt @db.Timestamp(6)
  users       User[]   @relation("UserSystemRoles")

  @@map("system_roles")
}

model AdminSession {
  id           Int       @id @default(autoincrement())
  userId       Int
  token        String    @unique(map: "admin_sessions_token_unique")
  ipAddress    String?
  userAgent    String?
  lastActivity DateTime  @default(now()) @db.Timestamp(6)
  expiresAt    DateTime  @db.Timestamp(6)
  revokedAt    DateTime? @db.Timestamp(6)
  createdAt    DateTime  @default(now()) @db.Timestamp(6)
  updatedAt    DateTime  @updatedAt @db.Timestamp(6)
  user         User      @relation(fields: [userId], references: [id], onDelete: Cascade, map: "admin_sessions_userid_foreign")

  @@index([expiresAt], map: "admin_sessions_expiresat_index")
  @@index([token], map: "admin_sessions_token_index")
  @@index([userId], map: "admin_sessions_userid_index")
  @@map("admin_sessions")
}

model AdminAuditLog {
  id         Int      @id @default(autoincrement())
  userId     Int
  action     String
  resource   String
  resourceId String?
  metadata   Json?
  ipAddress  String?
  userAgent  String?
  createdAt  DateTime @default(now()) @db.Timestamp(6)
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade, map: "admin_audit_logs_userid_foreign")

  @@index([action], map: "admin_audit_logs_action_index")
  @@index([createdAt], map: "admin_audit_logs_createdat_index")
  @@index([resource], map: "admin_audit_logs_resource_index")
  @@index([userId], map: "admin_audit_logs_userid_index")
  @@map("admin_audit_logs")
}

model SecurityAlert {
  id         Int      @id @default(autoincrement())
  type       String
  details    Json
  status     String   @default("PENDING")
  created_at DateTime @default(now()) @db.Timestamp(6)
  updated_at DateTime @db.Timestamp(6)

  @@map("security_alerts")
}

model AuditLog {
  id         Int      @id @default(autoincrement())
  user_id    Int
  action     String
  resource   String
  details    Json
  ip_address String
  timestamp  DateTime @default(now()) @db.Timestamp(6)
  users      User     @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "audit_logs_user_id_foreign")

  @@index([action], map: "audit_logs_action_index")
  @@index([timestamp], map: "audit_logs_timestamp_index")
  @@index([user_id], map: "audit_logs_user_id_index")
  @@map("audit_logs")
}

model SetupToken {
  id           String       @id @default(uuid())
  token        String       @unique(map: "setup_tokens_token_unique")
  expiresAt    DateTime     @db.Timestamp(6)
  isUsed       Boolean      @default(false)
  usedAt       DateTime?    @db.Timestamp(6)
  createdAt    DateTime     @default(now()) @db.Timestamp(6)
  createdByIp  String
  usedByIp     String?
  fingerprint  String?
  environment  String
  metadata     Json?
  auditEntries SetupAudit[]

  @@index([environment], map: "setup_tokens_environment_index")
  @@index([isUsed], map: "setup_tokens_isused_index")
  @@index([token], map: "setup_tokens_token_index")
  @@map("setup_tokens")
}

model SetupAudit {
  id        String     @id @default(uuid())
  tokenId   String
  action    String
  ip        String
  timestamp DateTime   @default(now()) @db.Timestamp(6)
  metadata  Json?
  success   Boolean
  error     String?
  token     SetupToken @relation(fields: [tokenId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "setup_audit_tokenid_foreign")

  @@index([action], map: "setup_audit_action_index")
  @@index([timestamp], map: "setup_audit_timestamp_index")
  @@index([tokenId], map: "setup_audit_tokenid_index")
  @@map("setup_audit")
}

model AccessToken {
  id          String    @id @default(uuid())
  name        String
  token       String    @unique(map: "access_tokens_token_unique")
  userId      Int
  description String?
  createdAt   DateTime  @default(now()) @db.Timestamp(6)
  expiresAt   DateTime? @db.Timestamp(6)
  lastUsedAt  DateTime? @db.Timestamp(6)
  scope       String[]  @default(["all"])
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade, map: "access_tokens_userid_foreign")

  @@unique([userId, name], map: "access_tokens_userid_name_unique")
  @@index([token], map: "access_tokens_token_index")
  @@map("access_tokens")
}

model knex_migrations {
  id             Int       @id @default(autoincrement())
  name           String?   @db.VarChar(255)
  batch          Int?
  migration_time DateTime? @db.Timestamptz(6)
}

model knex_migrations_lock {
  index     Int  @id @default(autoincrement())
  is_locked Int?
}

enum DomainStatus {
  PENDING
  VERIFIED
  FAILED
  DNS_CONFIGURING
}

enum CertStatus {
  ACTIVE
  EXPIRED
  REVOKED
}
