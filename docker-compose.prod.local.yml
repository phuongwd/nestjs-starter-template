# Local production testing configuration
version: '3.8'

x-app-common: &app-common
  build:
    context: .
    dockerfile: Dockerfile
  networks:
    - nanoe-network-prod
  depends_on:
    postgres:
      condition: service_healthy
    redis:
      condition: service_healthy

x-postgres-common: &postgres-common
  image: postgres:16-alpine
  networks:
    - nanoe-network-prod
  command: >
    postgres 
    -c shared_buffers=128MB
    -c max_connections=100
    -c effective_cache_size=512MB
    -c maintenance_work_mem=128MB
    -c checkpoint_completion_target=0.9
    -c wal_buffers=16MB
    -c default_statistics_target=100
    -c random_page_cost=1.1
    -c effective_io_concurrency=200
    -c work_mem=4MB
    -c min_wal_size=1GB
    -c max_wal_size=4GB
    -c tcp_keepalives_idle=60
    -c tcp_keepalives_interval=10
    -c tcp_keepalives_count=3
  healthcheck:
    test: ['CMD-SHELL', 'pg_isready -U postgres']
    interval: 5s
    timeout: 5s
    retries: 5
  restart: unless-stopped

services:
  app:
    <<: *app-common
    container_name: nanoe-api-prod
    build:
      target: production
    ports:
      - '3002:3000'
    environment:
      - NODE_ENV=production
      - PORT=3000
      - API_VERSION=1
      - API_PREFIX=api/v
      - API_SUPPORTED_VERSIONS=1,2
      - DATABASE_URL=postgresql://postgres:postgres@postgres:5432/nanoe?connection_limit=5&pool_timeout=2000
      - JWT_SECRET=your-test-secret
      - JWT_EXPIRATION=3600
      - DEPLOYMENT_TYPE=self-hosted
      - LICENSE_KEY=test-license-key
      # SMTP Configuration
      - SMTP_HOST=smtp.gmail.com
      - SMTP_PORT=587
      - SMTP_SECURE=false
      # These values should be overridden by .env.production.local
      - SMTP_USER=override-in-env-file
      - SMTP_PASS=override-in-env-file
      - SMTP_FROM=override-in-env-file
      # Logging Configuration
      - LOG_LEVEL=info
      # Redis Configuration
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - CACHE_TTL=3600
    env_file:
      - .env.production.local
    healthcheck:
      test:
        [
          'CMD',
          'wget',
          '--no-verbose',
          '--tries=1',
          '--spider',
          'http://localhost:3000/health/quick',
        ]
      interval: 30s
      timeout: 5s
      retries: 3
      start_period: 30s

  postgres:
    <<: *postgres-common
    container_name: nanoe-postgres-prod
    ports:
      - '5434:5432'
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=nanoe
      # Performance tuning
      - POSTGRES_MAX_CONNECTIONS=100
      - POSTGRES_SHARED_BUFFERS=128MB
    volumes:
      - postgres_data_prod:/var/lib/postgresql/data

  redis:
    container_name: nanoe-redis-prod
    image: redis:7-alpine
    networks:
      - nanoe-network-prod
    ports:
      - '6380:6379'
    healthcheck:
      test: ['CMD', 'redis-cli', 'ping']
      interval: 5s
      timeout: 5s
      retries: 5
    volumes:
      - redis_data_prod:/data
networks:
  nanoe-network-prod:
    driver: bridge
    ipam:
      driver: default
      config:
        - subnet: 172.28.0.0/16

volumes:
  postgres_data_prod:
